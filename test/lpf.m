#!/usr/bin/env octave

%%%% OpenEMS script generated by Qucs-RFlayout from : lpf.sch

clear;
close all;
pkg load csxcad;
pkg load openems;
pkg load openems-hll;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% CLI

cli = oemshll_cli(argv(), 'lpf', [1, 2], ...
	'header', 'OpenEMS Octave script generated by Qucs-RFlayout from : lpf.sch');

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% PREPROCESSING

%%%% VARIABLES
t_preprocess_start = clock();
physical_constants;
fstart = 2e+07;
fstop = 5e+09;
points = 499;
f0 = (fstop + fstart) / 2; % Center frequency
fc = (fstop - fstart) / 2; % Cutoff frequency
unit = 1e-3;
lambda = c0 / (f0 + fc) / unit;
high_div = 200;        % Depend on your simulation, you may want to tweak this value
metal_div = 60;        % Depend on your simulation, you may want to tweak this value
substrate_div = 30;    % Depend on your simulation, you may want to tweak this value
time_res = 300000;     % Depend on your simulation, you may want to tweak this value
high_res = lambda / high_div;
metal_res = lambda / metal_div;
substrate_res = lambda / substrate_div;
end_criteria = 1e-4;
csx_file = 'lpf.csx';

%%%% SUBSTRATES
CSX = InitCSX();
if cli.preprocess

% Sub1 : SUBST
endif % cli.preprocess
Sub1.metal.t = (0.035);
Sub1.metal.rho = (1e-10);
Sub1.metal.cond = (1 / Sub1.metal.rho);
Sub1.center = [41.35, -26.25, Sub1.metal.t];
Sub1.substrate.tand = (0.035);
Sub1.substrate.Er = (4.2);
Sub1.substrate.K = (Sub1.substrate.tand * 2 * pi * f0 * EPS0 * Sub1.substrate.Er);
Sub1.substrate.h = (0.8);
Sub1.substrate.L = (66.7);
Sub1.substrate.W = (36.5);
Sub1.dump.start = [8, -44.5, (Sub1.metal.t/2)];
Sub1.dump.stop = [74.7, -8, (Sub1.metal.t/2)];
if cli.preprocess
CSX = AddMaterial(CSX, 'Sub1.substrate');
CSX = SetMaterialProperty(CSX, 'Sub1.substrate', ...
	'Epsilon', Sub1.substrate.Er, ...
	'Kappa', Sub1.substrate.K);
CSX = AddBox(CSX, 'Sub1.substrate', 1, ...
	[8, -44.5, -Sub1.substrate.h], ...
	[74.7, -8, 0]);
if cli.conductingsheet
CSX = AddConductingSheet(CSX, 'Sub1.ground', Sub1.metal.cond, Sub1.metal.t*unit);
CSX = AddBox(CSX, 'Sub1.ground', 2, ...
	[8, -44.5, -Sub1.substrate.h], ...
	[74.7, -8, -Sub1.substrate.h]);
else % cli.conductingsheet
CSX = AddMetal(CSX, 'Sub1.ground');
CSX = AddBox(CSX, 'Sub1.ground', 2, ...
	[8, -44.5, (-Sub1.substrate.h - Sub1.metal.t)], ...
	[74.7, -8, -Sub1.substrate.h]);
endif % cli.conductingsheet

%%%% SHAPES
% MS1 : MLIN
endif % cli.preprocess
MS1.center = [18.35, -26.25, Sub1.metal.t];
if cli.preprocess
if cli.conductingsheet
CSX = AddConductingSheet(CSX, 'MS1', Sub1.metal.cond, Sub1.metal.t*unit);
CSX = AddBox(CSX, 'MS1', 2, ...
	[16.1, -26.5, 0], ...
	[20.6, -26, 0]);
else % cli.conductingsheet
CSX = AddMetal(CSX, 'MS1');
CSX = AddBox(CSX, 'MS1', 2, ...
	[16.1, -26.5, 0], ...
	[20.6, -26, Sub1.metal.t]);
endif % cli.conductingsheet

% MS2 : MLIN
endif % cli.preprocess
MS2.center = [21.35, -26.25, Sub1.metal.t];
if cli.preprocess
if cli.conductingsheet
CSX = AddConductingSheet(CSX, 'MS2', Sub1.metal.cond, Sub1.metal.t*unit);
CSX = AddBox(CSX, 'MS2', 2, ...
	[20.6, -36.5, 0], ...
	[22.1, -16, 0]);
else % cli.conductingsheet
CSX = AddMetal(CSX, 'MS2');
CSX = AddBox(CSX, 'MS2', 2, ...
	[20.6, -36.5, 0], ...
	[22.1, -16, Sub1.metal.t]);
endif % cli.conductingsheet

% MS3 : MLIN
endif % cli.preprocess
MS3.center = [31.1, -26.25, Sub1.metal.t];
if cli.preprocess
if cli.conductingsheet
CSX = AddConductingSheet(CSX, 'MS3', Sub1.metal.cond, Sub1.metal.t*unit);
CSX = AddBox(CSX, 'MS3', 2, ...
	[22.1, -26.5, 0], ...
	[40.1, -26, 0]);
else % cli.conductingsheet
CSX = AddMetal(CSX, 'MS3');
CSX = AddBox(CSX, 'MS3', 2, ...
	[22.1, -26.5, 0], ...
	[40.1, -26, Sub1.metal.t]);
endif % cli.conductingsheet

% MS4 : MLIN
endif % cli.preprocess
MS4.center = [41.35, -26.25, Sub1.metal.t];
if cli.preprocess
if cli.conductingsheet
CSX = AddConductingSheet(CSX, 'MS4', Sub1.metal.cond, Sub1.metal.t*unit);
CSX = AddBox(CSX, 'MS4', 2, ...
	[40.1, -36.5, 0], ...
	[42.6, -16, 0]);
else % cli.conductingsheet
CSX = AddMetal(CSX, 'MS4');
CSX = AddBox(CSX, 'MS4', 2, ...
	[40.1, -36.5, 0], ...
	[42.6, -16, Sub1.metal.t]);
endif % cli.conductingsheet

% MS5 : MLIN
endif % cli.preprocess
MS5.center = [51.6, -26.25, Sub1.metal.t];
if cli.preprocess
if cli.conductingsheet
CSX = AddConductingSheet(CSX, 'MS5', Sub1.metal.cond, Sub1.metal.t*unit);
CSX = AddBox(CSX, 'MS5', 2, ...
	[42.6, -26.5, 0], ...
	[60.6, -26, 0]);
else % cli.conductingsheet
CSX = AddMetal(CSX, 'MS5');
CSX = AddBox(CSX, 'MS5', 2, ...
	[42.6, -26.5, 0], ...
	[60.6, -26, Sub1.metal.t]);
endif % cli.conductingsheet

% MS6 : MLIN
endif % cli.preprocess
MS6.center = [61.35, -26.25, Sub1.metal.t];
if cli.preprocess
if cli.conductingsheet
CSX = AddConductingSheet(CSX, 'MS6', Sub1.metal.cond, Sub1.metal.t*unit);
CSX = AddBox(CSX, 'MS6', 2, ...
	[60.6, -36.5, 0], ...
	[62.1, -16, 0]);
else % cli.conductingsheet
CSX = AddMetal(CSX, 'MS6');
CSX = AddBox(CSX, 'MS6', 2, ...
	[60.6, -36.5, 0], ...
	[62.1, -16, Sub1.metal.t]);
endif % cli.conductingsheet

% MS7 : MLIN
endif % cli.preprocess
MS7.center = [64.35, -26.25, Sub1.metal.t];
if cli.preprocess
if cli.conductingsheet
CSX = AddConductingSheet(CSX, 'MS7', Sub1.metal.cond, Sub1.metal.t*unit);
CSX = AddBox(CSX, 'MS7', 2, ...
	[62.1, -26.5, 0], ...
	[66.6, -26, 0]);
else % cli.conductingsheet
CSX = AddMetal(CSX, 'MS7');
CSX = AddBox(CSX, 'MS7', 2, ...
	[62.1, -26.5, 0], ...
	[66.6, -26, Sub1.metal.t]);
endif % cli.conductingsheet

%%%% MESH
endif % cli.preprocess
mesh.x = [];
mesh.y = [];
mesh.z = [];
if cli.preprocess
if cli.mesh

% High resolution mesh for non orthogonal shapes
if cli.highresmesh
mesh.x = [mesh.x, ...
	];
mesh.y = [mesh.y, ...
	];
endif % cli.highresmesh

% Standard metal resolution mesh for orthogonal shapes
% First column : outer line, Second column : inner line (thirds rule)
% Last symbol : edge direction (from inner side to outer side)
if cli.metalresmesh
mesh.x = [mesh.x, ...
	(16.1), ... % P1 : Pac
	(66.6), ... % P2 : Pac
	];
mesh.y = [mesh.y, ...
	(-26.25) ... % P1 : Pac
	(-26.25) ... % P2 : Pac
	];
if cli.thirdsrule
mesh.x = [mesh.x, ...
	(20.6 - 2*metal_res/3), (20.6 + metal_res/3), ... % MS8 : MSTEP : <
	(22.1 + 2*metal_res/3), (22.1 - metal_res/3), ... % MS9 : MSTEP : >
	(40.1 - 2*metal_res/3), (40.1 + metal_res/3), ... % MS10 : MSTEP : <
	(42.6 + 2*metal_res/3), (42.6 - metal_res/3), ... % MS11 : MSTEP : >
	(60.6 - 2*metal_res/3), (60.6 + metal_res/3), ... % MS12 : MSTEP : <
	(62.1 + 2*metal_res/3), (62.1 - metal_res/3), ... % MS13 : MSTEP : >
	];
mesh.y = [mesh.y, ...
	(-26.5 - 2*metal_res/3), (-26.5 + metal_res/3), ... % MS1 : MLIN : v
	(-26 + 2*metal_res/3), (-26 - metal_res/3), ... % MS1 : MLIN : ^
	(-36.5 - 2*metal_res/3), (-36.5 + metal_res/3), ... % MS2 : MLIN : v
	(-16 + 2*metal_res/3), (-16 - metal_res/3), ... % MS2 : MLIN : ^
	(-26.5 - 2*metal_res/3), (-26.5 + metal_res/3), ... % MS3 : MLIN : v
	(-26 + 2*metal_res/3), (-26 - metal_res/3), ... % MS3 : MLIN : ^
	(-36.5 - 2*metal_res/3), (-36.5 + metal_res/3), ... % MS4 : MLIN : v
	(-16 + 2*metal_res/3), (-16 - metal_res/3), ... % MS4 : MLIN : ^
	(-26.5 - 2*metal_res/3), (-26.5 + metal_res/3), ... % MS5 : MLIN : v
	(-26 + 2*metal_res/3), (-26 - metal_res/3), ... % MS5 : MLIN : ^
	(-36.5 - 2*metal_res/3), (-36.5 + metal_res/3), ... % MS6 : MLIN : v
	(-16 + 2*metal_res/3), (-16 - metal_res/3), ... % MS6 : MLIN : ^
	(-26.5 - 2*metal_res/3), (-26.5 + metal_res/3), ... % MS7 : MLIN : v
	(-26 + 2*metal_res/3), (-26 - metal_res/3), ... % MS7 : MLIN : ^
	];
else % cli.thirdsrule
mesh.x = [mesh.x, 16, 66.7];
mesh.y = [mesh.y, -16, -36.5];
endif % cli.thirdsrule
mesh.z = [mesh.z, ...
	(-Sub1.substrate.h/3), ...
	(-2*Sub1.substrate.h/3), ...
	];
if cli.conductingsheet
mesh.z = [mesh.z, ...
	(0), ...
	(-Sub1.substrate.h), ...
	];
else % cli.conductingsheet
mesh.z = [mesh.z, ...
	(Sub1.metal.t/2), ...
	(-Sub1.substrate.h - Sub1.metal.t/2), ...
	];
endif % cli.conductingsheet
if cli.smoothmesh
mesh = SmoothMesh(mesh, metal_res);
endif % cli.smoothmesh
endif % cli.metalresmesh
endif % cli.mesh
endif % cli.preprocess

% Boundary box
if cli.mesh
mesh.x = [mesh.x, 16 - lambda * 3/4, 66.7 + lambda * 3/4];
mesh.y = [mesh.y, -16 + lambda * 3/4, -36.5 - lambda * 3/4];
mesh.z = [mesh.z, -0.835 - lambda * 3/4, 0.035 + lambda * 3/4];
if cli.smoothmesh
mesh = SmoothMesh(mesh, substrate_res);
endif % cli.smoothmesh
endif % cli.mesh

if cli.preprocess
CSX = DefineRectGrid(CSX, unit, mesh);
endif % cli.preprocess

%%%% PORTS
% P1 : Pac
P1.center = [16.1, -26.25, Sub1.metal.t];
P1.Z = (50);
P1.P = (0);
P1.F = (1e+09);
if cli.conductingsheet
[CSX port{1}] = AddLumpedPort(CSX, 5, 1, P1.Z, ...
	[16, -26.5, (-Sub1.substrate.h)], ...
	[16.2, -26, (0)], ...
	[0 0 1], find(cli.active_ports == 1));
else % cli.conductingsheet
[CSX port{1}] = AddLumpedPort(CSX, 5, 1, P1.Z, ...
	[16, -26.5, (-Sub1.substrate.h - Sub1.metal.t)], ...
	[16.2, -26, (Sub1.metal.t)], ...
	[0 0 1], find(cli.active_ports == 1));
endif % cli.conductingsheet

% P2 : Pac
P2.center = [66.6, -26.25, Sub1.metal.t];
P2.Z = (50);
P2.P = (0);
P2.F = (1e+09);
if cli.conductingsheet
[CSX port{2}] = AddLumpedPort(CSX, 5, 2, P2.Z, ...
	[66.5, -26.5, (-Sub1.substrate.h)], ...
	[66.7, -26, (0)], ...
	[0 0 1], find(cli.active_ports == 2));
else % cli.conductingsheet
[CSX port{2}] = AddLumpedPort(CSX, 5, 2, P2.Z, ...
	[66.5, -26.5, (-Sub1.substrate.h - Sub1.metal.t)], ...
	[66.7, -26, (Sub1.metal.t)], ...
	[0 0 1], find(cli.active_ports == 2));
endif % cli.conductingsheet

%%%% SIMULATION
if cli.preprocess
FDTD = InitFDTD('NrTS', time_res, 'EndCriteria', end_criteria);
FDTD = SetGaussExcite(FDTD, f0, fc);
if cli.mur
	BC = {'MUR', 'MUR', 'MUR', 'MUR', 'MUR', 'MUR'};
else
	BC = {'PML_8', 'PML_8', 'PML_8', 'PML_8', 'PML_8', 'PML_8'};
endif
FDTD = SetBoundaryCond(FDTD, BC);
endif % cli.preprocess

%%%% NF2FF
if cli.nf2ff
if cli.mesh
if cli.smoothmesh
% Be careful that NF2FF box boundaries are not in PML
[CSX nf2ff] = CreateNF2FFBox(CSX, 'nf2ff', ...
	[mesh.x(10), mesh.y(10), mesh.z(10)], ...
	[mesh.x(end-9), mesh.y(end-9), mesh.z(end-9)]);
endif % cli.smoothmesh
endif % cli.mesh
endif % cli.nf2ff

%%%% DUMPS
if cli.preprocess
% Sub1 ET
if cli.dump_et
CSX = AddDump(CSX, 'Sub1.Et', 'DumpType', 0);
CSX = AddBox(CSX, 'Sub1.Et', 0, Sub1.dump.start, Sub1.dump.stop);
endif % cli.dump_et
% Sub1 HT
if cli.dump_ht
CSX = AddDump(CSX, 'Sub1.Ht', 'DumpType', 1);
CSX = AddBox(CSX, 'Sub1.Ht', 0, Sub1.dump.start, Sub1.dump.stop);
endif % cli.dump_ht
% Sub1 CURRENT
if cli.dump_jt
CSX = AddDump(CSX, 'Sub1.Jt', 'DumpType', 2, 'DumpMode', 0);
CSX = AddBox(CSX, 'Sub1.Jt', 0, Sub1.dump.start, Sub1.dump.stop);
endif % cli.dump_jt
% Sub1 CURRENT DENSITY
if cli.dump_cdt
CSX = AddDump(CSX, 'Sub1.Cdt', 'DumpType', 3);
CSX = AddBox(CSX, 'Sub1.Cdt', 0, Sub1.dump.start, Sub1.dump.stop);
endif % cli.dump_cdt

%%%% RUN OPENEMS
WriteOpenEMS([cli.path_simulation '/' csx_file], FDTD, CSX);
t_preprocess_stop = clock();
endif % cli.preprocess
if cli.gui
CSXGeomPlot([cli.path_simulation '/' csx_file]);
endif % cli.gui
if cli.process
disp(["\nRunning openEMS. If you cannot cancel the simulation using CTRL+C, try to touch '", cli.path_simulation, "/ABORT' file."]);
t_process_start = clock();
RunOpenEMS(cli.path_simulation, csx_file);
t_process_stop = clock();
endif % cli.process

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% POSTPROCESSING

if cli.postprocess
% NF2FF center should be placed at the center of the radiating element.
%nf2ff.center = [(max(mesh.x)-min(mesh.x))/2, (max(mesh.y)-min(mesh.y))/2, 0];
nf2ff.center = MS4.center;

t_postprocess_start = clock();
oemshll_postProcess('lpf', cli.path_simulation, cli.path_result, port, cli.ports_index, cli.active_ports, fstart, fstop, points, ...
	'legend_out', cli.legend_out, ...
	'nf2ff', cli.nf2ff, ...
	'nf2ff_data', nf2ff, ...
	'nf2ff_mode', cli.nf2ff_mode, ...
	'nf2ff_3d', cli.nf2ff_3d, ...
	'nf2ff_3d_phistep', cli.nf2ff_phistep, ...
	'nf2ff_3d_thetastep', cli.nf2ff_thetastep, ...
	'nf2ff_3d_frames', cli.nf2ff_frames, ...
	'nf2ff_3d_delay', cli.nf2ff_delay, ...
	'nf2ff_3d_dump', cli.dump_ff3d, ...
	'nf2ff_3d_dump_unit', unit, ...
	'f_select', cli.f, ...
	'f_min', cli.f_min, ...
	'f_max', cli.f_max, ...
	'f_equal', cli.f_equal_s, cli.f_equal_v);
t_postprocess_stop = clock();
endif % cli.postprocess

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% SYSTEM

%%%% TIMES
disp("\nDurations :");
d_total = 0;
if cli.preprocess
	d_preprocess = etime(t_preprocess_stop, t_preprocess_start);
	h_preprocess = fix(d_preprocess / 3600);
	m_preprocess = fix((d_preprocess - h_preprocess*3600) / 60);
	s_preprocess = round(d_preprocess - h_preprocess*3600 - m_preprocess*60);
	disp(['Preprocessing : ', ...
		num2str(h_preprocess), 'h ', ...
		num2str(m_preprocess), 'm ', ...
		num2str(s_preprocess), 's']);
	d_total = d_total + d_preprocess;
endif
if cli.process
	d_process = etime(t_process_stop, t_process_start);
	h_process = fix(d_process / 3600);
	m_process = fix((d_process - h_process*3600) / 60);
	s_process = round(d_process - h_process*3600 - m_process*60);
	disp(['Processing : ', ...
		num2str(h_process), 'h ', ...
		num2str(m_process), 'm ', ...
		num2str(s_process), 's']);
	d_total = d_total + d_process;
endif
if cli.postprocess
	d_postprocess = etime(t_postprocess_stop, t_postprocess_start);
	h_postprocess = fix(d_postprocess / 3600);
	m_postprocess = fix((d_postprocess - h_postprocess*3600) / 60);
	s_postprocess = round(d_postprocess - h_postprocess*3600 - m_postprocess*60);
	disp(['Postprocessing : ', ...
		num2str(h_postprocess), 'h ', ...
		num2str(m_postprocess), 'm ', ...
		num2str(s_postprocess), 's']);
	d_total = d_total + d_postprocess;
endif
h_total = fix(d_total / 3600);
m_total = fix((d_total - h_total*3600) / 60);
s_total = round(d_total - h_total*3600 - m_total*60);
disp(['Total : ', ...
	num2str(h_total), 'h ', ...
	num2str(m_total), 'm ', ...
	num2str(s_total), 's']);

if cli.postprocess
if cli.batch == false
disp("\nTerminated, press any key to exit.");
pause();
endif % cli.batch
endif % cli.postprocess
return;
